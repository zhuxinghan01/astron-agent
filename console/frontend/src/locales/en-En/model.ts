const translation = {
  addOpenAI: 'Add OpenAI Model',
  modelName: 'Model Name',
  hostedModels: 'Hosted Models',
  interfaceAddress: 'API Endpoint',
  interfaceAddressPlaceholder: 'Please enter API Endpoint',
  apiKey: 'API Key',
  tags: 'Tags',
  tagCannotBeEmpty: 'Tag cannot be empty',
  tagNameTooLong: 'Tag name cannot exceed 10 characters',
  tagAlreadyExists: 'Tag already exists',
  maxTagsReached: 'Maximum 10 tags allowed',
  confirmDeleteModel: 'Confirm Delete Model',
  delete: 'Delete',
  encryptionFailed: 'Encryption failed',
  modelDescription: 'Model Description',
  modelParameters: 'Model Parameters Configuration',
  add: 'Add',
  enterModelFieldValue: 'Please enter the model field value in the interface',
  parameterValidationFailed:
    'Parameter validation failed, please check and try again',
  parameterNameCannotBeRepeated: 'Parameter names cannot be repeated',
  pleaseEnterParameterName: 'Please enter parameter name',
  pleaseEnterParameterDescription: 'Please enter parameter description',
  onlyLettersNumbersDashUnderscore:
    'Only letters, numbers, dashes or underscores are allowed',
  temperatureDescription:
    'Controls the diversity and randomness of generated results. Lower values are more rigorous; higher values are more divergent',
  apiKeyNotChanged: 'Pass identifier when apiKey is not changed',
  parameterName: 'Parameter Name',
  parameterDescription: 'Parameter Description',
  parameterType: 'Parameter Type',
  decimalPlaces: 'Decimal Places',
  parameterRange: 'Parameter Range',
  defaultValue: 'Default Value',
  operation: 'Operation',
  pleaseEnter: 'Please enter',
  // Model management page
  modelManagement: 'Model Management',
  createModel: 'Create Model',
  emptyDescription: 'No models yet, create one now~',
  searchNoResults: 'No search results',
  edit: 'Edit',
  view: 'View',
  deleteWarning: 'Confirm to delete this model?',
  publicModel: 'Public Model',
  personalModel: 'Personal Model',
  // Model detail page
  back: 'Back',
  updatedAt: 'Updated at: ',
  modelIntroduction: 'Model Introduction',
  introduction: '1. Introduction',
  advantage: '2. Advantage',
  scene: '3. Scene',
  modelType: 'Model Category',
  pleaseSelectModelType: 'Please select model category',
  languageSupport: 'Language Support',
  contextLength: 'Context Length',
  modelScene: 'Model Scene',
  pleaseSelectModelScene: 'Please select model scene',
  pleaseSelectLanageSupport: 'Please select lanage suppoert',
  pleaseSelectContextLenght: 'Please select context lenght',
  modelCallVolume: 'Model Call Volume',
  // Model management header
  modelWillStopService:
    'Some models will stop service soon, please switch models as soon as possible',
  quickFilter: 'Quick Filter',
  pleaseSelect: 'Please select',
  all: 'All',
  thirdPartyModel: 'Third Party Model',
  localModel: 'Local Model',
  // Category aside
  modelStatus: 'Model Status',
  offShelf: 'Off Shelf',
  toBeOffShelf: 'To Be Off Shelf',
  // Modal
  pleaseEnterCustomCategory: 'Please enter custom category',
  pleaseEnterCustomScene: 'Please enter custom scene',
  // Model card
  editAction: 'Edit',
  deleteAction: 'Delete',
  language: 'Language: ',
  contextLengthLabel: 'Context Length: ',
  updated: 'Updated',
  // Model detail page
  modelWillStopOn: 'Model will stop on ',
  stopServicePleaseSwitch: ' service, please switch models as soon as possible',
  // Number formatting
  hundredMillion: '00M',
  tenThousand: '0K',
  // Other
  other: 'Other',
  // Delete confirmation
  deleteConfirmMessage:
    'Deletion cannot be undone. Are you sure you want to continue?',
  addThirdPartyModel: 'Add Third Party Model',
  selectLocalModel: 'Select Local Model',
  selectModel: 'Select Model',
  selectModelTips:
    'If no models are available, please complete model download first.',
  referenceDocument: 'Reference Document',
  selectModelPlaceholder: 'Please select file',
  performanceConfiguration: 'Performance Configuration',
  acceleratorNumber: '(Accelerator Number)',
  acceleratorCount: 'Accelerator Count',
  localModelPath: 'Local Model Path',
  noLocalModelsAvailable: 'No local models available',
  localModelLoadFailed: 'Failed to load local models',
  pleaseSelectAcceleratorCount: 'Please select accelerator count',
  // Operation status
  enable: 'Enable',
  disable: 'Disable',
  create: 'Create',
  update: 'Update',
  // Success messages
  modelEnableSuccess: 'Model enabled successfully',
  modelDisableSuccess: 'Model disabled successfully',
  modelCreateSuccess: 'Model created successfully',
  modelUpdateSuccess: 'Model updated successfully',
  modelDeleteSuccess: 'Model deleted successfully',
  localModelCreateSuccess: 'Local model created successfully',
  localModelUpdateSuccess: 'Local model updated successfully',
  // Error messages
  modelEnableFailed: 'Failed to enable model',
  modelDisableFailed: 'Failed to disable model',
  modelCreateFailed: 'Failed to create model',
  modelUpdateFailed: 'Failed to update model',
  modelDeleteFailed: 'Failed to delete model',
  localModelCreateFailed: 'Failed to create local model',
  localModelUpdateFailed: 'Failed to update local model',
  getCategoryTreeFailed: 'Failed to fetch category tree',
  getModelDetailFailed: 'Failed to fetch model details',
  getModelInfoFailed: 'Failed to fetch model information',
  getModelUsageFailed: 'Failed to fetch model usage',
  // Publish status
  publishRunning: 'Published',
  publishPending: 'Publishing',
  publishFailed: 'Publish Failed',
  republish: 'Republish',
  republishSuccess: 'Republish Success',
  republishFailed: 'Republish Failed',
  localUploadModel: 'Local Upload Model',
  noDocument: 'No document, coming soon',
};

export default translation;
